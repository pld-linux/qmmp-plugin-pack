--- qmmp-plugin-pack-1.1.3/src/Input/ffap/CMakeLists.txt.orig	2016-10-04 14:45:00.000000000 +0200
+++ qmmp-plugin-pack-1.1.3/src/Input/ffap/CMakeLists.txt	2017-05-24 16:27:29.130890035 +0200
@@ -59,16 +59,29 @@
       
       message("-- Architecture: x86")
     ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
+	IF(LIB_SUFFIX STREQUAL "x32")
+      ADD_DEFINITIONS(-DARCH_X86_32)
+      
+      add_custom_command(OUTPUT x86inc.o 
+                         COMMAND yasm ARGS -m amd64 -f elfx32 -DARCH_X86_64 -DPIC x86inc.asm -o ${CMAKE_CURRENT_BINARY_DIR}/x86inc.o
+                         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+                         COMMENT "compiling  x86inc.asm")
+      add_custom_command(OUTPUT dsputil_yasm.o
+                         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} 
+                         COMMAND yasm ARGS -m amd64 -f elfx32 -DARCH_X86_64 -DPIC dsputil_yasm.asm -o ${CMAKE_CURRENT_BINARY_DIR}/dsputil_yasm.o
+                         DEPENDS x86inc.o COMMENT "compiling  dsputil_yasm.asm")
+	ELSE(LIB_SUFFIX STREQUAL "x32")
       ADD_DEFINITIONS(-DARCH_X86_64)
       
       add_custom_command(OUTPUT x86inc.o 
                          COMMAND yasm ARGS -m amd64 -f elf64 -DARCH_X86_64 -DPIC x86inc.asm -o ${CMAKE_CURRENT_BINARY_DIR}/x86inc.o
                          WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                          COMMENT "compiling  x86inc.asm")
       add_custom_command(OUTPUT dsputil_yasm.o
                          WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} 
                          COMMAND yasm ARGS -m amd64 -f elf64 -DARCH_X86_64 -DPIC dsputil_yasm.asm -o ${CMAKE_CURRENT_BINARY_DIR}/dsputil_yasm.o
                          DEPENDS x86inc.o COMMENT "compiling  dsputil_yasm.asm")
+	ENDIF(LIB_SUFFIX STREQUAL "x32")
       
       message("-- Architecture: x86_64")
     ENDIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^(i.86)$")
--- qmmp-plugin-pack-1.1.3/src/Input/ffap/ffap.c.orig	2016-10-04 14:45:00.000000000 +0200
+++ qmmp-plugin-pack-1.1.3/src/Input/ffap/ffap.c	2017-05-24 16:25:39.245492751 +0200
@@ -47,6 +47,9 @@
 #include <math.h>
 #include "ffap.h"
 
+#if ARCH_X86_32 || ARCH_X86_64
+#include <cpuid.h>
+#endif
 
 #if defined(_WIN32) && ! defined(_MSC_VER)
 #include <malloc.h>
@@ -1760,38 +1763,16 @@
     uint32_t max_std_level, max_ext_level, std_caps=0, ext_caps=0;
 
 #if ARCH_X86_32
-    x86_reg a, c;
-    __asm__ volatile (
-        /* See if CPUID instruction is supported ... */
-        /* ... Get copies of EFLAGS into eax and ecx */
-        "pushfl\n\t"
-        "pop %0\n\t"
-        "mov %0, %1\n\t"
-
-        /* ... Toggle the ID bit in one copy and store */
-        /*     to the EFLAGS reg */
-        "xor $0x200000, %0\n\t"
-        "push %0\n\t"
-        "popfl\n\t"
-
-        /* ... Get the (hopefully modified) EFLAGS */
-        "pushfl\n\t"
-        "pop %0\n\t"
-        : "=a" (a), "=c" (c)
-        :
-        : "cc"
-        );
-
-    if (a == c) {
+    if (__get_cpuid_max(0, NULL) == 0) {
         trace ("ffap: cpuid is not supported\n");
         return 0; /* CPUID not supported */
     }
 #endif
 
-    cpuid(0, max_std_level, ebx, ecx, edx);
+    __get_cpuid(0, &max_std_level, &ebx, &ecx, &edx);
 
     if(max_std_level >= 1){
-        cpuid(1, eax, ebx, ecx, std_caps);
+        __get_cpuid(1, &eax, &ebx, &ecx, &std_caps);
         if (std_caps & (1<<23))
             rval |= FF_MM_MMX;
         if (std_caps & (1<<25))
@@ -1812,10 +1793,10 @@
                   ;
     }
 
-    cpuid(0x80000000, max_ext_level, ebx, ecx, edx);
+    __get_cpuid(0x80000000, &max_ext_level, &ebx, &ecx, &edx);
 
     if(max_ext_level >= 0x80000001){
-        cpuid(0x80000001, eax, ebx, ecx, ext_caps);
+        __get_cpuid(0x80000001, &eax, &ebx, &ecx, &ext_caps);
         if (ext_caps & (1<<31))
             rval |= FF_MM_3DNOW;
         if (ext_caps & (1<<30))
